//  Scope mathod

// JavaScript এ scope হলো ভেরিয়েবল, ফাংশন, অবজেক্ট ইত্যাদির অ্যাক্সেস করা যেতে পারে এবং কোথায় অ্যাক্সেস করা যাবে সেটা নির্ধারণ করে। JavaScript এ scope বিভিন্ন ধরনের হতে পারে, যা নিম্নের মধ্যে অন্তর্ভুক্ত হতে পারে:

    // 1. Global Scope: 
    // ফাংশন বা ব্লকের বাইরে ডিক্লেয়ার করা ভেরিয়েবল এবং ফাংশন গ্লোবাল scope পায়। গ্লোবাল ভেরিয়েবল এবং ফাংশন কোথাও থেকেই অ্যাক্সেস করা যেতে পারে, যেমন অন্য ফাংশন বা ব্লকে অথবা যেকোনো অংশে।
    // গ্লোবাল scope এর একটি 

    // উদাহরণ:

    var globalVariable = 10;

    function myFunction() {
        console.log(globalVariable); // অ্যাক্সেস করা যায়
    }

     //  2. Local Scope: ফাংশনের ভিতরে ডিক্লেয়ার করা ভেরিয়েবল লোকাল scope পায়, অর্থাৎ সেটি শুধুমাত্র সেই ফাংশনের ভিতর থেকেই অ্যাক্সেস করা যায়। প্রতিটি ফাংশন তার নিজের লোকাল scope তৈরি করে এবং সেখানে ডিক্লেয়ার করা ভেরিয়েবল গুলি বাইন্ড হয় সেই ফাংশনের মধ্যে মাত্র।

    //  লোকাল scope এর উদাহরণ:
    function myFunction() {
        var localVar = 20; // localVar লোকাল scope পায়
        console.log(localVar); // অ্যাক্সেস করা যায়
    }
    
    console.log(localVar); // ত্রুটি: localVar ডিফাইন করা হয়নি

    // 3. JavaScript এ block scope ও আছে, যা ES6 (ECMAScript 2015) এর সাথে let এবং const কীওয়ার্ড দ্বারা প্রবেশ করেছে। let এবং const কীওয়ার্ড দিয়ে ডিক্লেয়ার করা ভেরিয়েবল গুলি ব্লকের স্কোপে বাইন্ড হয় (সাধারণত ব্রেস {} এর মধ্যে)।

    // ব্লক scope এর উদাহরণ:

    {
        let blockVar = 30;
        console.log(blockVar); // অ্যাক্সেস করা যায়
    }
    
    console.log(blockVar); // ত্রুটি: blockVar ডিফাইন করা হয়নি
    
